#	PowerShell-Script:	jlog.ps1
# -------------------------------------------------------------------------------------------------
#	Function:	Command line tool for scanning logfiles generated by the jFAST application
#
# -------------------------------------------------------------------------------------------------
#	usage: jlog [-c] [-h|-Help] [-j|-jl] [-l logfile] [-ls] [-sall|[-serr] [-sexc]] [-t|-Tail n] [-w]
#
#	Options:
# 
#	-c
#		Clear screen before output.
#		Must precede -h option, if used together.
# 
#	-h | -Help
#		Help: print usage.
# 
#	-j
#		Jira output format.
# 
#	-jl
#		Same as -j but name of logfile is formattet as internal link.
#		The corresponding logfile has to be attached to the Jira issue to work properly!
# 
#	-l logfile
#		Name of logfile, i.e. jfast.2016_10_28__06_25_12.log
#		Only the filename is expected. Do not provide any part of the pathname at this point.
# 
#	-ls
#		List newest logfiles in descending alphabetical order.
#		This option may be combined with the following options:
#			-w: sort by LastWriteTime (descending also)
# 			[-t | -Tail] n: Show only n lines (default is 15).
#
#	-sall
#		Combines -serr and -sexc.
# 
#	-serr
#		List all lines marked with: "ERROR".
# 
#	-sexc
#		List all lines marked with: "java.lang.Exception".
# 
#	[-t | -Tail] n
#		Specifies the number of lines from the end of the logfile to be shown.
# 
#	-w
#		Search for logfile with latest modification date in respect to LastWriteTime.
#		Otherwise use CreationTime (default).
# -------------------------------------------------------------------------------------------------

$usage = "usage: jlog [-c] [-h|-Help] [-j|-jl] [-l logfile] [-ls] [-sall|[-serr] [-sexc]] [-t|-Tail n] [-w]"
$scriptVersion = "v1.14"
$scriptName = $MyInvocation.MyCommand.Name


# print script version before all output
# eventually print it again after clear screen section ;-)
write-host $scriptName "Version" $scriptVersion

function write-jira-2columns( $key, $value) {
	write-host "|" $key "|" $value "|"
}

function write-key-value( $key, $value) {
	if ($jiraFormat) {
		write-jira-2columns -key $key -value $value
	} else {
		$tabIndent = 4
		$tabPos = 20
		# aufrunden=Ceiling, abrunden=Floor
		$nr = [int][Math]::Ceiling(($tabPos - $key.Length) / $tabIndent)
		$tab = "`t" * $nr
		write-host "$key$tab$value"
	}
}

function Find-Logfile( $logFile="jfast.2*.log", $sortObject="CreationTime") {
# $sortObject: 	"CreationTime"
#				"LastWriteTime"
	Get-ChildItem -Path $env:TEMP -Filter $logFile | Sort-Object $sortObject  -Descending | Select-Object -First 1
}

# set environment variables
# -------------------------------------------------------------------------------------------------

# Pathname to usertemp
$tempDir = $env:TEMP

# Match pattern for jFAST logfiles
# Bxample: jfast.2016_11_18__07_32_27.log
# Beware to get not screwd up with filenames like 'jfast.exetime.2016_11_17__14_02_42.log'!
$logFile = "jfast.2*.log"

# Command line defaults
$jiraFormat = $false
$jiraLogfileLinkFormat = $false
$optionClear = $false
$optionFileDate = "CreationTime"
$showAllErrors = $false
$showErrors = $false
$showExceptions = $false
$optionTailNrOfLines = 0
# option: -ls
$showDir = $false
$defaultTailNrOfLines = 15


#	Command line parameters
# -------------------------------------------------------------------------------------------------

for ( $i = 0; $i -lt $args.count; $i++ ) {
    if ($args[ $i ] -eq "-c"){ $optionClear = $true }
    if ($args[ $i ] -eq "-j"){ $jiraFormat=$true}
    if ($args[ $i ] -eq "-jl"){ 
		$jiraFormat=$true
		$jiraLogfileLinkFormat=$true
	}
    if ($args[ $i ] -eq "-l"){ $logFile=$args[ $i+1 ]}
    if ($args[ $i ] -eq "-ls"){ $showDir=$true}
    if ($args[ $i ] -eq "-serr"){ $showErrors=$true}
    if ($args[ $i ] -eq "-sexc"){ $showExceptions=$true}
    if ($args[ $i ] -eq "-sall"){ 
		$showExceptions=$true
		$showErrors=$true
		}
    if ($args[ $i ] -eq "-t" -or $args[ $i ] -eq "-Tail"){
		$optionTailNrOfLines=$args[ $i+1 ]
		# write-host "`nh6. -Tail $optionTailNrOfLines`n"
		}
    if ($args[ $i ] -eq "-w"){ $optionFileDate = "LastWriteTime " }
    if ($args[ $i ] -eq "-h" -or $args[ $i ] -eq "-Help"){ 
		if ($optionClear) {
			clear
		}
		write-host "`n$usage"
		write-host "`nOptions:"
		write-host "`n-c"
		write-host "	Clear screen before output."
		write-host "	Must precede -h option, if used together."
		write-host "`n-h | -Help"
		write-host "	Help: print help screen"
		write-host "`n-j"
		write-host "	Jira output format."
		write-host "`n-jl"
		write-host "   Same as -j but name of logfile is formattet as internal link."
		write-host "   The corresponding logfile has to be attached to the Jira issue to work properly!"
		write-host "`n-l logfile"
		write-host "	Name of logfile, i.e. 'jfast.2016_10_28__06_25_12.log'"
		write-host "	Only the filename is expected. Do not provide any part of the pathname at this point."
		write-host "`n-ls"
		write-host "	List newest logfiles in descending alphabetical order."
		write-host "	This option may be combined with the following options:"
		write-host "	  -w: sort by LastWriteTime (descending also)"
		write-host "	  -[-t | -Tail] n: Show only n lines (default is 15)."
		write-host "`n-sall"
		write-host "	Combines -serr and -sexc."
		write-host "`n-serr"
		write-host "	List all lines marked with: 'ERROR'."
		write-host "`n-sexc"
		write-host "	List all lines marked with: 'java.lang.Exception'."
		write-host "`n[-t | -Tail] n"
		write-host "	Specifies the number of lines from the end of the logfile to be shown."
		write-host "`n-w"
		write-host "	Search for logfile with latest modification date in respect to LastWriteTime."
		write-host "	Otherwise use CreationTime (default)."
		write-host ""
		exit
		}
}

if ($optionClear) {
	clear
	if (! $jiraFormat) {
		# script version has to be printed again because of clear
		write-host $scriptName "Version" $scriptVersion
	}
}

#if (! $jiraFormat) {
	#write-host "`nTemp dir: $tempDir `n" 
#}

#	show directory contents
# -------------------------------------------------------------------------------------------------
if ($showDir) {
	if ($optionTailNrOfLines -eq 0) {
		# set number of lines default to default
		$optionTailNrOfLines = $defaultTailNrOfLines
	}

	if ($optionFileDate -ne "CreationTime") {
		write-host "`nSort by LastWriteTime descending"
		write-host
		Get-ChildItem -path $tempDir\$logFile -File | sort -Descending -property LastWriteTime   | Select-Object -first $optionTailNrOfLines
	} else {
		write-host "`nSort by name descending"
		write-host
		Get-ChildItem -path $tempDir\$logFile -File | sort -Descending | Select-Object -first $optionTailNrOfLines
	}
	exit
}

#	find logfile
# -------------------------------------------------------------------------------------------------
if ($optionFileDate -eq "CreationTime") {
	$jfastLogFile = (Find-Logfile -logFile $logFile).name
} else {
	$jfastLogFile = (Find-Logfile -logFile $logFile -sortObject "LastWriteTime").name	
}
$pathnameJfastLogFile = "$tempDir\$jfastLogFile"

if ($jiraFormat) {
	write-host "`nh5. jFAST logfile"
	if ($jiraLogfileLinkFormat) {
		write-host "[^$jfastLogFile]"
	} else {
		write-host "{{$jfastLogFile}}"
	}
} else {
	write-host "`njFAST logfile: " $jfastLogFile
}

# find the line number when loading the first scenario
# all configurations output should be already written and all lines behind that line number may be ignored
$stopLine = Select-String -Path $pathnameJfastLogFile -Pattern "rebuildScenarioTree" | Select-Object -First 1 -ExpandProperty 'LineNumber'
if ($stopLine -eq 0 -or !$stopLine) {
	# in case there isn't a scenario loaded at this point
	$stopLine = 999
}
if ($jiraFormat) {
	write-host "stopLine at line" $stopLine
} else {
	write-host "stopLine at line" $stopLine
}


#	print settings
# -------------------------------------------------------------------------------------------------
if ($jiraFormat) {
	write-host "`nh5. Settings"
} else {
	write-host "`nSettings:"
	write-host "----------------------------------------------------------------------"
}
#regex: Select-String -path $pathnameJfastLogFile -pattern "java.version.*"
#simple: Select-String -path $latest.name -SimpleMatch "[logPropertiesToFile (2046)] java.version" 

# Java Homedir
# ------------------------
$matchString = "java.home"
$javaHome = Get-Content -First $stopLine -Path $pathnameJfastLogFile | Where-Object {$_.Contains($matchString)}
write-key-value -key "Java Home" -value $javaHome.Substring($javaHome.IndexOf($matchString)+$matchString.Length+3)

# Java Version
# ------------------------
$javaVers = Get-Content -First $stopLine -Path $pathnameJfastLogFile | Where-Object {$_.Contains("java.version")}
#write-host $javaVers
#write-host $javaVers.IndexOf("java.version")
$matchString = "java.version"
write-key-value -key "Java Version" -value $javaVers.Substring($javaVers.IndexOf($matchString)+$matchString.Length+3)

# JDBC-Version
# ------------------------
$matchString = "Jdbc-Treiberversion zur Datenquelle CONFIG"
$jdbcVers = Get-Content -First $stopLine -Path $pathnameJfastLogFile | Where-Object {$_.Contains($matchString)}
write-key-value -key "JDBC-Version" -value $jdbcVers.Substring($jdbcVers.IndexOf($matchString)+$matchString.Length+2)

# ODBC Server name
# ------------------------
$ODBCServerName = (Get-ItemProperty -Path Registry::HKEY_CURRENT_USER\Software\ODBC\ODBC.INI\LHT_FAST -Name ServerName).ServerName
#write-host "ODBC Server name = $ODBCServerName"
write-key-value -key "ODBC Server name" -value $ODBCServerName

# Config-DB
# ------------------------
$matchString = "Url zur Datenquelle CONFIG"
$configDB = Get-Content -First $stopLine -Path $pathnameJfastLogFile | Where-Object {$_.Contains($matchString)}
#write-key-value -key "Config-DB" -value $configDB.Substring($configDB.IndexOf($matchString)+$matchString.Length+3)
$a = $configDB.Substring($configDB.IndexOf($matchString)+$matchString.Length+3)
write-key-value -key "Config-DB" -value ($a -replace '^.*/')

# Applikations-DB
# ------------------------
$matchString = "Url zur Datenquelle 0"
$applicationDB = Get-Content -First $stopLine -Path $pathnameJfastLogFile | Where-Object {$_.Contains($matchString)}
#write-key-value -key "Appl.-DB" -value $applicationDB.Substring($applicationDB.IndexOf($matchString)+$matchString.Length+3)
$a = $configDB.Substring($configDB.IndexOf($matchString)+$matchString.Length+3)
write-key-value -key "Appl.-DB" -value ($a -replace '^.*/')

# User Config-DB
# ------------------------
$matchString = "Benutzer zur Datenquelle CONFIG"
$userConfigDB = Get-Content -First $stopLine -Path $pathnameJfastLogFile | Where-Object {$_.Contains($matchString)}
write-key-value -key "User Config-DB" -value $userConfigDB.Substring($userConfigDB.IndexOf($matchString)+$matchString.Length+2)

# User name
# ------------------------
# de.gtt.appframework.GttApplication [logPropertiesToFile (2046)] user.name = U868687
$matchString = "user.name"
$userName = Get-Content -First $stopLine -Path $pathnameJfastLogFile | Where-Object {$_.Contains($matchString)}
#write-host "OS User =" $userName.Substring($userName.IndexOf($matchString)+$matchString.Length+3)
write-key-value -key "OS User" -value $userName.Substring($userName.IndexOf($matchString)+$matchString.Length+3)

# Login User name
# ------------------------
# 2016-12-06 17:10:12,393 INFO de.gtt.configDB.eclipselinkspecific.GttSessionCustomizer [postLogin (451)] Benutzer wt21_AM erfolgreich angemeldet als User
$matchString = "GttSessionCustomizer"
$loginUserName = Get-Content -First $stopLine -Path $pathnameJfastLogFile | Where-Object {$_.Contains($matchString)}
#write-host "OS User =" $userName.Substring($userName.IndexOf($matchString)+$matchString.Length+3)
#write-key-value -key "Login User" -value $loginUserName.Substring($loginUserName.IndexOf($matchString)+$matchString.Length+3)
$subString1 = $loginUserName.Substring($loginUserName.IndexOf($matchString)+$matchString.Length+3)
#write-key-value -key "subString1" -value $subString1
$matchString2 = "Benutzer"
write-key-value -key "Login User" -value $subString1.Substring($subString1.IndexOf($matchString2)+$matchString2.Length+1)

# jFAST Version
# ------------------------
# de.gtt.appframework.GttApplication [logPropertiesToFile (2048)] jFAST Release = r1.5.4.23
$matchString = "jFAST Release"
$jfastVersion = Get-Content -First $stopLine -Path $pathnameJfastLogFile | Where-Object {$_.Contains($matchString)}
#write-host "jFAST Release =" $jfastVersion.Substring($jfastVersion.IndexOf($matchString)+$matchString.Length+3)
write-key-value -key "jFAST Release" -value $jfastVersion.Substring($jfastVersion.IndexOf($matchString)+$matchString.Length+3)

# Config File used
# ------------------------
# find the LATEST config file name used.
# find something like: ConfigurationProperties übernommen ConfigFiles\jfastT JFAST2 (wt21_AM).conf
$setProperties = Get-Content -First $stopLine -Path $pathnameJfastLogFile | Where-Object {$_.Contains("setProperties")} | Select-Object -Last 1
$subString = $setProperties.Substring($setProperties.IndexOf("ConfigurationProperties"))
#write-host "ConfigFile =" $subString.Substring("ConfigurationProperties übernommen".Length)
write-key-value -key "Config File" -value $subString.Substring("ConfigurationProperties übernommen".Length)





# Number of lines
# ------------------------
$logfileCount = @( Get-Content -Path $pathnameJfastLogFile ).Count
#write-host "Number of lines: " $logfileCount
write-key-value -key "Number of lines" -value $logfileCount



if ($jiraFormat) {
	write-host "`nh5. Exceptions"
} else {
	write-host "`nExceptions:"
	write-host "----------------------------------------------------------------------"
}

#	find exceptions
# -------------------------------------------------------------------------------------------------
$exceptionsCount = @( Get-Content -Path $pathnameJfastLogFile | Where-Object { $_.Contains("java.lang.Exception") } ).Count
write-host "Number of java.lang.Exception(s) found: " $exceptionsCount

#	show exceptions
# -------------------------------------------------------------------------------------------------
if ($showExceptions) {
	if ($jiraFormat) {
		write-host "`nh6. All exceptions in logfile`n"
	} else {
		write-host "`nAll exceptions in logfile:"
		write-host "----------------------------------------------------------------------"
	}

	$matchString = "java.lang.Exception"
	if ($jiraFormat) {
		write-host "{noformat}"
	}
	Get-Content -Path $pathnameJfastLogFile | Where-Object {$_.Contains($matchString)}
	if ($jiraFormat) {
		write-host "{noformat}"
	}
}

if ($showErrors) {
	if ($jiraFormat) {
		write-host "`nh6. All errors in logfile`n"
	} else {
		write-host "`nAll errors in logfile:"
		write-host "----------------------------------------------------------------------"
	}

	$matchString = "ERROR"
	if ($jiraFormat) {
		write-host "{noformat}"
	}
	Get-Content -Path $pathnameJfastLogFile | Where-Object {$_.Contains($matchString)}
	if ($jiraFormat) {
		write-host "{noformat}"
	}
}

#	show trailing lines
# -------------------------------------------------------------------------------------------------
if ($optionTailNrOfLines -gt 0) {
	if ($jiraFormat) {
		write-host "`nh6. Last $optionTailNrOfLines lines`n"
	} else {
		write-host "`nLast $optionTailNrOfLines lines:"
		write-host "----------------------------------------------------------------------"
	}

	if ($jiraFormat) {
		write-host "{noformat}"
	}
	Get-Content -Path $pathnameJfastLogFile -Tail $optionTailNrOfLines
	if ($jiraFormat) {
		write-host "{noformat}"
	}
}

if ($jiraFormat) {
	write-host ~$scriptName "Version" $scriptVersion~
}
